:py:mod:`milopy.utils`
======================

.. py:module:: milopy.utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   milopy.utils.add_nhood_expression
   milopy.utils.build_nhood_graph
   milopy.utils.add_covariate_to_nhoods_var
   milopy.utils.annotate_nhoods
   milopy.utils.annotate_nhoods_continuous



.. py:function:: add_nhood_expression(milo_mdata: mudata.MuData, layer: str = None)

   Calculates the mean expression in neighbourhoods of each feature in `milo_mdata['cells'].X` or
   `milo_mdata['cells'][layer]` (if layer is not None).

   Params:
   -------
   - milo_mdata: MuData object
   - layer: which data layer to use as expression matrix (default: None, uses `milo_mdata['cells'].X`)

   Returns:
   -------
   Updates adata in place to store the matrix of average expression in each neighbourhood in `milo_mdata['samples'].varm['expr']`


.. py:function:: build_nhood_graph(milo_mdata: mudata.MuData, basis: str = 'X_umap')

   Build graph of neighbourhoods used for visualization of DA results

   Params:
   -------
   - milo_mdata: MuData object
   - basis: string indicating the name of the obsm basis to use to use for layout of neighbourhoods (key in `adata.obsm`)

   Returns:
   -------
   None, adds in place"
   - `milo_mdata['samples'].varp['nhood_connectivities']`: graph of overlap between neighbourhoods (i.e. no of shared cells)
   - `milo_mdata['samples'].var["Nhood_size"]`: number of cells in neighbourhoods


.. py:function:: add_covariate_to_nhoods_var(milo_mdata: mudata.MuData, new_covariates: List[str])

   Add covariate from cell-level obs to sample-level obs. These should be covariates for which a single value
   can be assigned to each sample.

   Params:
   ------
   - milo_mdata: MuData object
   - new_covariates: list of strings indicating the columns in `milo_mdata['cells'].obs` to add to `milo_mdata['samples'].obs`

   Returns:
   -------
   None, adds columns to `milo_mdata['samples']` in place


.. py:function:: annotate_nhoods(milo_mdata: mudata.MuData, anno_col: str)

   Assigns a categorical label to neighbourhoods, based on the most frequent label
   among cells in each neighbourhood. This can be useful to stratify DA testing
   results by cell types or samples.

   Params:
   -------
   - milo_mdata: MuData object 
   - anno_col: string indicating column in adata.obs containing the cell annotations to use for nhood labelling

   Returns:
   --------
   None. Adds in place:
   - `milo_mdata['samples'].var["nhood_annotation"]`: assigning a label to each nhood
   - `milo_mdata['samples'].var["nhood_annotation_frac"]` stores the fraciton of cells in the neighbourhood with the assigned label
   - `milo_mdata['samples'].varm['frac_annotation']`: stores the fraction of cells from each label in each nhood
   - `milo_mdata['samples'].uns["annotation_labels"]`: stores the column names for `milo_mdata['samples'].varm['frac_annotation']`


.. py:function:: annotate_nhoods_continuous(milo_mdata: mudata.MuData, anno_col: str)

   Assigns a continuous value to neighbourhoods, based on mean cell level covariate stored in adata.obs. 
   This can be useful to correlate DA log-foldChanges with continuous covariates such as pseudotime, gene expression scores etc...

   Params:
   -------
   - adata: MuData object
   - anno_col: string indicating column in adata.obs containing the cell annotations to use for nhood labelling

   Returns:
   --------
   None. Adds in place:
   - `milo_mdata['samples'].var["nhood_{anno_col}"]`: assigning a continuous value to each nhood


