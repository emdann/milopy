:py:mod:`milopy.core`
=====================

.. py:module:: milopy.core


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   milopy.core.make_nhoods
   milopy.core.count_nhoods
   milopy.core.DA_nhoods
   milopy.core._graph_spatialFDR
   milopy.core._try_import_bioc_library



.. py:function:: make_nhoods(adata: anndata.AnnData, neighbors_key: str = None, prop=0.1, seed: int = 42)

   This function randomly samples vertcies on a graph to define neighbourhoods.
   These are then refined by computing the median profile for the neighbourhood
   in reduced dimensional space and selecting the nearest vertex to this
   position. Thus, multiple neighbourhoods may be collapsed down together to
   prevent over-sampling the graph space.

   Params:
   -------
   - adata: AnnData object. Should contain a knn graph in `adata.obsp`
   - neighbors_key: string indicating the key in `adata.obsp` to use as KNN graph. If not specified, 
   `make_nhoods` looks .obsp[‘connectivities’] for connectivities (default storage places for
   `scanpy.pp.neighbors`). If specified, it looks .obsp[.uns[neighbors_key][‘connectivities_key’]] for
   connectivities.
   - prop: fraction of cells to sample for neighbourhood index search (default: 0.1)
   - seed: random seed for cell sampling (default: 42)

   Returns:
   --------
   None, adds in place:
   - `adata.obsm['nhoods']`: a binary matrix of cell to neighbourhood assignments
   - `adata.obs['nhood_ixs_refined']`: a boolean indicating whether a cell is an index for a neighbourhood
   - `adata.obs['kth_distance']`: the distance to the kth nearest neighbour for each index cell (used for SpatialFDR correction)
   - `adata.uns["nhood_neighbors_key"]`: stores the KNN graph key in `adata.obsp` used for neighbourhood construction


.. py:function:: count_nhoods(adata: anndata.AnnData, sample_col: str)

   Builds a sample-level AnnData object storing the matrix of cell counts per sample per neighbourhood.

   Params:
   -------
   - adata: AnnData object with neighbourhoods defined in `adata.obsm['nhoods']`
   - sample_col: string, column in adata.obs that contains sample information 
   (what should be in the columns of the cell count matrix)

   Returns: 
   --------
   MuData object storing the original (i.e. cell-level) AnnData in `mudata['cells']`
   and the sample-level anndata storing the neighbourhood cell counts in `mudata['samples']`.
   Here:
   - `mudata['samples'].obs_names` are samples (defined from `adata.obs['sample_col']`)
   - `mudata['samples'].var_names` are neighbourhoods 
   - `mudata['samples'].X` is the matrix counting the number of cells from each
   sample in each neighbourhood


.. py:function:: DA_nhoods(milo_mdata: mudata.MuData, design: str, model_contrasts: str = None, subset_samples: List[str] = None, add_intercept: bool = True)

   Performs differential abundance testing on neighbourhoods using QLF test implementation from edgeR
   (using R code under the hood)

   Params:
   -------
   - milo_mdata: MuData object, output of `count_nhoods`
   - design: formula for the test, following glm syntax from R (e.g. '~ condition'). Terms should be columns in `milo_mdata['cells'].obs`.
   - model_contrasts: A string vector that defines the contrasts used to perform DA testing, following glm syntax from R (e.g. "conditionDisease - conditionControl").
       If no contrast is specified (default), then the last categorical level in condition of interest is used as the test group.
   - subset_samples: subset of samples (obs in `milo_mdata['samples']`) to use for the test
   - add_intercept: whether to include an intercept in the model. If False, this is equivalent to adding + 0 in the design formula. 
   When model_contrasts is specified, this is set to False by default. 

   Returns:
   --------
   None, modifies `milo_mdata['samples']` in place, adding the results of the DA test to `.var`:
   - `logFC` stores the log fold change in cell abundance (coefficient from the GLM)
   - `PValue` stores the p-value for the QLF test before multiple testing correction
   - `SpatialFDR` stores the the p-value adjusted for multiple testing to limit the false discovery rate, 
       calculated with weighted Benjamini-Hochberg procedure


.. py:function:: _graph_spatialFDR(sample_adata, neighbors_key=None)

   FDR correction weighted on inverse of connectivity of neighbourhoods.
   The distance to the k-th nearest neighbor is used as a measure of connectivity.


.. py:function:: _try_import_bioc_library(name)


